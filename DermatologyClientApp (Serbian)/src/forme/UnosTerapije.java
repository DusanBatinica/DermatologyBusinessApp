/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.AbstractObject;
import domen.Korisnik;
import domen.Lek;
import domen.Lekar;
import domen.Pacijent;
import domen.StavkaTerapije;
import domen.Terapija;
import exception.ValidacijaException;
import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;
import kont.Kontroler;
import modeli.ModelTabeleTerapija;

/**
 *
 * @author Dusan
 */
public class UnosTerapije extends javax.swing.JFrame {

    Terapija terapija;
    JFrame glavna;
    Korisnik ulogovani;
    SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
    ModelTabeleTerapija mtt;
    String status = "";
    ArrayList<AbstractObject> helpingList = new ArrayList<>();

    public UnosTerapije() {
        initComponents();
    }

    UnosTerapije(GlavnaForma glavna, Korisnik ulogovani) throws Exception {
        initComponents();
        this.setTitle("Unos terapije");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.ulogovani = ulogovani;
        terapija = new Terapija("0", "", null, null, ulogovani, null, null);
        popuniCMBoxeve();
        this.status = "unos";
        srediTabelu();
        txtTerapijaID.setEnabled(false);
        this.glavna = glavna;
    }

    public UnosTerapije(PretragaTerapijeForma pretraga, Terapija terapija, Korisnik k) throws Exception {
        initComponents();
        this.setTitle("Izmena terapije");
        popuniCMBoxeve();
        this.glavna = pretraga;
        this.terapija = terapija;
        this.ulogovani = k;
        this.status = "izmena";
        txtTerapijaID.setEnabled(false);
        String id = this.terapija.getTerapijaID().trim();
        this.terapija.setTerapijaID(id);
        setujPodatke(terapija);
        srediTabelu();
        popuniPodatkeOLeku(terapija);
        cmbLekar.setEnabled(false);
        cmbPacijent.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtTerapijaID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNaziv = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDatum = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmbPacijent = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbLekar = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cmbLek = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        txtNacinPripreme = new javax.swing.JTextField();
        btnDodajStavku = new javax.swing.JButton();
        btnObrisiStavku = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaStavki = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        btnSacuvaj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("TerapijaID:");

        jLabel2.setText("Naziv:");

        jLabel3.setText("Datum(dd.MM.yyyy):");

        jLabel4.setText("Pacijent:");

        cmbPacijent.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("Lekar:");

        cmbLekar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Podaci vezani za stavku terapije:");

        jLabel8.setText("Lek:");

        cmbLek.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel9.setText("Nacin pripreme:");

        btnDodajStavku.setText("Dodaj stavku");
        btnDodajStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajStavkuActionPerformed(evt);
            }
        });

        btnObrisiStavku.setText("Obrisi stavku");
        btnObrisiStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiStavkuActionPerformed(evt);
            }
        });

        tabelaStavki.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelaStavki);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(btnDodajStavku, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(btnObrisiStavku, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbLek, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNacinPripreme)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 5, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cmbLek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtNacinPripreme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDodajStavku)
                    .addComponent(btnObrisiStavku))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabel7.setText("Podaci vezani za terapiju:");

        btnSacuvaj.setText("Sacuvaj terapiju");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNaziv)
                            .addComponent(txtTerapijaID)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDatum)
                            .addComponent(cmbPacijent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbLekar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(btnSacuvaj)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTerapijaID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbPacijent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbLekar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(btnSacuvaj)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDodajStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajStavkuActionPerformed

        try {
            Lek l = (Lek) cmbLek.getSelectedItem();
            String nacinPripreme = txtNacinPripreme.getText();
            if (l == null || nacinPripreme.isEmpty()) {
                throw new ValidacijaException("Sva polja su obavezna za stavku!");
            }
            StavkaTerapije st = new StavkaTerapije();
            mtt = (ModelTabeleTerapija) tabelaStavki.getModel();
            st.setNacinPripreme(nacinPripreme);
            st.setAlarm(1);
            st.setLek(l);
            st.setTerapija(null);
            mtt.dodajStavku(st);
            mtt.postaviRB();
        } catch (ValidacijaException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Greška prilikom validacije za stavku!", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(UnosTerapije.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDodajStavkuActionPerformed

    private void btnObrisiStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiStavkuActionPerformed
        int index = tabelaStavki.getSelectedRow();

        if (index == -1) {
            JOptionPane.showMessageDialog(rootPane, "Izaberite stavku koju zelite da obrišete!", "Greška", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else {
            mtt = (ModelTabeleTerapija) tabelaStavki.getModel();
            mtt.obrisiStavku(index, helpingList);
        }
    }//GEN-LAST:event_btnObrisiStavkuActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        try {
            Pacijent pacijent = (Pacijent) cmbPacijent.getSelectedItem();
            Lekar lekar = (Lekar) cmbLekar.getSelectedItem();
            String naziv = txtNaziv.getText();
            String datum = txtDatum.getText();
            validacijaIPostavkaVrednosti(naziv, datum, pacijent, lekar);
            mtt = (ModelTabeleTerapija) tabelaStavki.getModel();

            Terapija t;
            if (status.equals("unos")) {
                t = (Terapija) Kontroler.vratiInstancu().sacuvajTerapiju(terapija);
                JOptionPane.showMessageDialog(this, "Sistem je uneo novu terapiju:\nID: " + t.getTerapijaID() + "\nNaziv terapije: " + t.getNaziv() + "\nLekar: " + t.getLekar() + "\nPacijent: " + t.getPacijent(), "Uspešno", JOptionPane.INFORMATION_MESSAGE);
                mtt.resetujModel();
            } else {
                List<AbstractObject> listaZaSlanje = napraviListuStavki();
                for (AbstractObject abstractObject : listaZaSlanje) {
                    StavkaTerapije s = (StavkaTerapije) abstractObject;
                    System.out.println("Ime:" + s.getNacinPripreme() + " rb:" + s.getNoviRedniBroj());
                }
                terapija.setListaStavki((ArrayList<AbstractObject>) listaZaSlanje);
                System.out.println(listaZaSlanje);
                t = (Terapija) Kontroler.vratiInstancu().azurirajTerapija(terapija);
                JOptionPane.showMessageDialog(this, "Sistem je izmenio terapiju:\nID: " + t.getTerapijaID() + "\nNaziv terapije: " + t.getNaziv() + "\nLekar: " + t.getLekar() + "\nPacijent: " + t.getPacijent(), "Uspešno", JOptionPane.INFORMATION_MESSAGE);
                helpingList = new ArrayList<>();
                glavna.setVisible(true);
                this.repaint();
                this.revalidate();
                dispose();
            }

        } catch (ValidacijaException ex) {
            //JOptionPane.showMessageDialog(rootPane,"Sistem ne može da zapamti novu trku", "Greška", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Greška prilikom validacije", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            System.out.println("Greska prilikom cuvanja terapije!");
            Logger.getLogger(UnosTerapije.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UnosTerapije.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UnosTerapije.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UnosTerapije.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UnosTerapije.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UnosTerapije().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajStavku;
    private javax.swing.JButton btnObrisiStavku;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox cmbLek;
    private javax.swing.JComboBox cmbLekar;
    private javax.swing.JComboBox cmbPacijent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaStavki;
    private javax.swing.JTextField txtDatum;
    private javax.swing.JTextField txtNacinPripreme;
    private javax.swing.JTextField txtNaziv;
    private javax.swing.JTextField txtTerapijaID;
    // End of variables declaration//GEN-END:variables

    private void popuniCMBoxeve() throws Exception {
        List<AbstractObject> listaPacijenata = Kontroler.vratiInstancu().vratiPacijente();
        if (listaPacijenata.isEmpty()) {
            throw new ValidacijaException("Nema pacijenata u bazi, te ne mozete uneti terapiju!");
        }
        cmbPacijent.setModel(new DefaultComboBoxModel(listaPacijenata.toArray()));
        cmbPacijent.setSelectedItem(listaPacijenata.get(1));

        List<AbstractObject> listaLekara = Kontroler.vratiInstancu().vratiLekare();
        if (listaLekara.isEmpty()) {
            throw new ValidacijaException("Nema lekara u bazi, te ne mozete uneti terapiju!");
        }
        cmbLekar.setModel(new DefaultComboBoxModel(listaLekara.toArray()));
        cmbLekar.setSelectedItem(listaLekara.get(1));

        List<AbstractObject> listaLekova = Kontroler.vratiInstancu().vratiLekove();
        if (listaLekova.isEmpty()) {
            throw new ValidacijaException("Nema lekova u bazi, te ne mozete uneti terapiju!");
        }
        cmbLek.setModel(new DefaultComboBoxModel(listaLekova.toArray()));
        cmbLek.setSelectedItem(listaLekara.get(1));

    }

    private void validacijaIPostavkaVrednosti(String naziv, String datum, Pacijent pacijent, Lekar lekar) throws ValidacijaException {
        if (pacijent == null || lekar == null || naziv.isEmpty() || datum.isEmpty()) {
            throw new ValidacijaException("Sva polja su obavezna!");
        }

        Date datum1 = proveriDatum(datum);

        List<AbstractObject> listaStavki = mtt.getListaStavki();

        if (listaStavki.isEmpty()) {
            throw new ValidacijaException("Morate uneti bar jednog učesnika!");
        }

        terapija.setNaziv(naziv);
        terapija.setDatum(datum1);
        terapija.setKorisnik(ulogovani);
        terapija.setPacijent(pacijent);
        terapija.setLekar(lekar);
        terapija.setListaStavki((ArrayList<AbstractObject>) listaStavki);
    }

    private Date proveriDatum(String datumm) throws ValidacijaException {
        Date datum;
        try {
            datum = sdf.parse(datumm);
        } catch (ParseException ex) {
            txtDatum.setBorder(new LineBorder(Color.red));
            throw new ValidacijaException("Datum nije unet pravilno! Unesite datum u formatu dd.MM.yyyy");
        }
        return datum;
    }

    private void srediTabelu() {
        ModelTabeleTerapija m = new ModelTabeleTerapija();
        tabelaStavki.setModel(m);
    }

    private void setujPodatke(Terapija terapija) {
        cmbLekar.setSelectedItem(terapija.getLekar());
        cmbPacijent.setSelectedItem(terapija.getPacijent());
        txtTerapijaID.setText(terapija.getTerapijaID());
        txtNaziv.setText(terapija.getNaziv());
        txtDatum.setText(sdf.format(terapija.getDatum()));
    }

    private void popuniPodatkeOLeku(Terapija terapija) {

        mtt = (ModelTabeleTerapija) tabelaStavki.getModel();
        mtt.setListaStavki((ArrayList<AbstractObject>) terapija.getListaStavki());
        mtt.popuniListuStavkiIzBaze(terapija.getListaStavki());
        mtt.postaviRB();
    }

    private List<AbstractObject> napraviListuStavki() {
        List<AbstractObject> finalnaLista = new ArrayList<>();
        List<AbstractObject> listaIzTabele = mtt.getListaStavki();
        for (AbstractObject abstractObject : listaIzTabele) {
            helpingList.add(abstractObject);
        }
        for (AbstractObject ao : helpingList) {
            int alarm = 0;
            for (AbstractObject ao1 : listaIzTabele) {
                StavkaTerapije st = (StavkaTerapije) ao;
                StavkaTerapije st1 = (StavkaTerapije) ao1;
                if (st.getRedniBroj() == st1.getRedniBroj() && st.getNacinPripreme().equals(st1.getNacinPripreme())) {
                    alarm++;
                }
            }
            if (alarm == 0) {
                StavkaTerapije stavkica = (StavkaTerapije) ao;
                stavkica.setStanje("obrisana");
                finalnaLista.add(stavkica);
            } else {
                StavkaTerapije stavkicaa = (StavkaTerapije) ao;
                finalnaLista.add(stavkicaa);
            }
        }
        return finalnaLista;
    }

    private void srediTabeluIzmena() {
        ModelTabeleTerapija m = new ModelTabeleTerapija();
        m.setListaStavki(terapija.getListaStavki());
        tabelaStavki.setModel(m);
    }

}
